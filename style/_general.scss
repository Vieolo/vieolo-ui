@use "sass:meta";
@import "base";

// This mixin adds the passed arguments to the class
//
// and then create separate states for the three sizes and then
// add the arguments to them as well.
//
// The final CSS:
// .something {
//		&--state {
//			property: value;
//			
//			&--sm {
//				@media all and (max-width: $mobileBreakPoint) {
//					property: value;
//				}
//			}
//		}
//	}
@mixin interClassSubDesktopVariant($args...) {    
    $sizes: (
        "lg": $lgBreakPoint,
        "md": $mdBreakPoint,
        "sm": $smBreakPoint
    );

	// The default state, applied to all sizes
    @each $state, $con in meta.keywords($args) {
        &--#{$state} {
            @each $k, $v in $con {
                    #{$k}: $v;
                }
        }
    }
   
	// Adding sizees to the original state
    @each $s, $bp in $sizes {
        @each $state, $con in meta.keywords($args) {
        &--#{$state} {
                &--#{$s} {
                    @media all and (max-width: $bp) {
						@each $k, $v in $con {
							#{$k}: $v;
						}
					}
                }
            }
        }
    }
} 


// This mixin takes a state of class and generates sub-states for sizes
// Look at icon button for example
//
// For example:
// .some-class {
// 		@include interClassContentVariant(one, two) using ($state) {
//			color: red;
//			@if $state == two {
//				color: blue
//			}
//			
//			p { font-size: 20px }
//		}
// }
//
// Converts to:
//
// .some-class {
// 		&--one {
// 			color: red;
//			
//			p { font-size: 20px }
//		}
// 		&--two {
// 			color: blue;
//			
//			p { font-size: 20px }
//		}
//
// 		&--one {
//			$--lg {
//				@media (...) {
// 					color: red;
//			
//					p { font-size: 20px }
//				}
//			}
//		}
// 		&--one {
//			$--lg {
//				@media (...) {
// 					color: blue;
//			
//					p { font-size: 20px }
//				}
//			}
//		}
//
//		and so on for md and sm
// }
@mixin interClassContentVariant($states...) {    
    $sizes: (
        "lg": $lgBreakPoint,
        "md": $mdBreakPoint,
        "sm": $smBreakPoint,
    );
	
	@each $state in $states {
		// The default state, applied to all sizes
		&--#{$state} {
			@content($state);
		}
	}

   
	// Adding sizees to the original state
    @each $s, $bp in $sizes {
		@each $state in $states {
			&--#{$state} {
				&--#{$s} {
					@media all and (max-width: $bp) {
						@content($state);
					}
				}
			}
		}
    }
} 

@mixin multiClassSubDesktopVariant($args...) {
    $sizes: (
        "lg": $lgBreakPoint,
        "md": $mdBreakPoint,
        "sm": $smBreakPoint
    );
    
    @each $cl, $con in meta.keywords($args) {
        .#{$cl} {
            @each $k, $v in $con {
                    #{$k}: $v;
                }
        }
    }
    
    @each $s, $bp in $sizes {
        @each $cl, $con in meta.keywords($args) {
        .#{$cl} {
                &--#{$s} {
                    @media all and (max-width: $bp) {
						@each $k, $v in $con {
							#{$k}: $v;
						}
					}
                }
            }
        }
    }
} 


// #region Colors and Pallet


@mixin primary-background {
	background-color: $primary-color-normal;
	color: $primary-color-text;
}
.primary-background {
	@include primary-background;
}

@mixin secondary-background {
	background-color: $secondary-color-normal;
	color: $secondary-color-text;
}
.secondary-background {
	@include secondary-background;
}

@mixin tertiary-background {
	background-color: $tertiary-color-normal;
	color: $tertiary-color-text;
}
.tertiary-background {
	@include tertiary-background;
}

@mixin alert-background {
	background-color: $alert-color-normal;
	color: $alert-color-text;
}
.alert-background {
	@include alert-background;
}

@mixin error-background {
	background-color: $error-color-normal;
	color: $error-color-text;
}
.error-background {
	@include error-background;
}

@mixin success-background {
	background-color: $success-color-normal;
	color: $success-color-text;
}
.success-background {
	@include success-background;
}

@mixin disable-background {
	background-color: $disabled-color;
	color: black;
}
.disable-background {
	@include disable-background;
}

@mixin accessory-orange-background {
	background-color: $accessory-orange-normal;
	color: $accessory-orange-text;
}
.accessory-orange-background {
	@include accessory-orange-background;
}

@mixin accessory-blue-background {
	background-color: $accessory-blue-normal;
	color: $accessory-blue-text;
}
.accessory-blue-background {
	@include accessory-blue-background;
}

@mixin accessory-green-background {
	background-color: $accessory-green-normal;
	color: $accessory-green-text;
}
.accessory-green-background {
	@include accessory-green-background;
}

@mixin default-text-color {
	color: $light-mode-normal-text-color;
}
.default-text-color {
	@include default-text-color;
}

@mixin gray-text-color {
	color: $light-mode-gray-text-color;
}
.gray-text-color {
	@include gray-text-color;
}

@mixin primary-color {
	color: $primary-color-normal;
}
.primary-color {
	@include primary-color;
}

@mixin secondary-color {
	color: $secondary-color-normal;
}
.secondary-color {
	@include secondary-color;
}

@mixin tertiary-color {
	color: $tertiary-color-normal;
}
.tertiary-color {
	@include tertiary-color;
}

@mixin alert-color {
	color: $alert-color-normal;
}
.alert-color {
	@include alert-color;
}

@mixin error-color {
	color: $error-color-normal;
}
.error-color {
	@include error-color;
}

@mixin success-color {
	color: $success-color-normal;
}
.success-color {
	@include success-color;
}

@mixin disable-color {
	color: $disabled-color;
}
.disable-color {
	@include disable-color;
}

@mixin accessory-orange-color {
	color: $accessory-orange-normal;
}
.accessory-orange-color {
	@include accessory-orange-color;
}

@mixin accessory-blue-color {
	color: $accessory-blue-normal;
}
.accessory-blue-color {
	@include accessory-blue-color;
}

@mixin accessory-green-color {
	color: $accessory-green-normal;
}
.accessory-green-color {
	@include accessory-green-color;
}

// These ripple classes are depreciated in favor of ripple--{color}
%ripple {
	background-position: center;
	transition: background 0.8s;

	&:active {
		background-size: 100%;
		transition: background 0s;
	}
}

@mixin ripple-error {
	@extend %ripple;
	&:active {
		background-color: rgba($error-color-normal, 0.5) !important;
		background: rgba($error-color-normal, 0.5) !important;
	}
}
.ripple-error {
	@include ripple-error;
}

@mixin ripple-alert {
	@extend %ripple;
	&:active {
		background-color: rgba($alert-color-normal, 0.5) !important;
		background: rgba($alert-color-normal, 0.5) !important;
	}
}
.ripple-alert {
	@include ripple-alert;
}

@mixin ripple-success {
	@extend %ripple;
	&:active {
		background-color: rgba($success-color-normal, 0.5) !important;
		background: rgba($success-color-normal, 0.5) !important;
	}
}
.ripple-success {
	@include ripple-success;
}

@mixin ripple-accessory-orange {
	@extend %ripple;
	&:active {
		background-color: rgba($accessory-orange-normal, 0.5) !important;
		background: rgba($accessory-orange-normal, 0.5) !important;
	}
}
.ripple-accessory-orange {
	@include ripple-accessory-orange;
}

@mixin ripple-accessory-blue {
	@extend %ripple;
	&:active {
		background-color: rgba($accessory-blue-normal, 0.5) !important;
		background: rgba($accessory-blue-normal, 0.5) !important;
	}
}
.ripple-accessory-blue {
	@include ripple-accessory-blue;
}

@mixin ripple-accessory-green {
	@extend %ripple;
	&:active {
		background-color: rgba($accessory-green-normal, 0.5) !important;
		background: rgba($accessory-green-normal, 0.5) !important;
	}
}
.ripple-accessory-green {
	@include ripple-accessory-green;
}

@mixin ripple-primary {
	@extend %ripple;
	&:active {
		background-color: rgba($primary-color-normal, 0.5) !important;
		background: rgba($primary-color-normal, 0.5) !important;
	}
}
.ripple-primary {
	@include ripple-primary;
}

@mixin ripple-secondary {
	@extend %ripple;
	&:active {
		background-color: rgba($secondary-color-normal, 0.5) !important;
		background: rgba($secondary-color-normal, 0.5) !important;
	}
}
.ripple-secondary {
	@include ripple-secondary;
}

@mixin ripple-tertiary {
	@extend %ripple;
	&:active {
		background-color: rgba($tertiary-color-normal, 0.5) !important;
		background: rgba($tertiary-color-normal, 0.5) !important;
	}
}
.ripple-tertiary {
	@include ripple-tertiary;
}

// These hover classes are depreciated in favor of hover--{color}
@mixin hover-primary {
	&:hover {
		background-color: $primary-color-light;
		background: $primary-color-light;
	}
}
.hover-primary {
	@include hover-primary;
}

@mixin hover-secondary {
	&:hover {
		background-color: $secondary-color-light;
		background: $secondary-color-light;
	}
}
.hover-secondary {
	@include hover-secondary;
}

@mixin hover-tertiary {
	&:hover {
		background-color: $tertiary-color-transparent;
		background: $tertiary-color-transparent;
	}
}
.hover-tertiary {
	@include hover-tertiary;
}

@mixin hover-error {
	&:hover {
		background-color: $error-color-transparent;
		background: $error-color-transparent;
	}
}
.hover-error {
	@include hover-error;
}

@mixin hover-alert {
	&:hover {
		background-color: $alert-color-transparent;
		background: $alert-color-transparent;
	}
}
.hover-alert {
	@include hover-alert;
}

@mixin hover-success {
	&:hover {
		background-color: $success-color-transparent;
		background: $success-color-transparent;
	}
}
.hover-success {
	@include hover-success;
}

@mixin hover-accessory-orange {
	&:hover {
		background-color: $accessory-orange-transparent;
		background: $accessory-orange-transparent;
	}
}
.hover-accessory-orange {
	@include hover-accessory-orange;
}

@mixin hover-accessory-blue {
	&:hover {
		background-color: $accessory-blue-transparent;
		background: $accessory-blue-transparent;
	}
}
.hover-accessory-blue {
	@include hover-accessory-blue;
}

@mixin hover-accessory-green {
	&:hover {
		background-color: $accessory-green-transparent;
		background: $accessory-green-transparent;
	}
}
.hover-accessory-green {
	@include hover-accessory-green;
}

@function getColorVariable($colorName, $colorType) {
	@if $colorName == "primary" and $colorType == "normal" {
		@return $primary-color-normal;
	} @else if $colorName == "primary" and $colorType == "light" {
		@return $primary-color-light;
	} @else if $colorName == "primary" and $colorType == "transparent" {
		@return $primary-color-transparent;
	} @else if $colorName == "primary" and $colorType == "text" {
		@return $primary-color-text;
	} @else if $colorName == "primary" and $colorType == "text-light" {
		@return $primary-color-text-light;
	} @else if $colorName == "secondary" and $colorType == "normal" {
		@return $secondary-color-normal;
	} @else if $colorName == "secondary" and $colorType == "light" {
		@return $secondary-color-light;
	} @else if $colorName == "secondary" and $colorType == "transparent" {
		@return $secondary-color-transparent;
	} @else if $colorName == "secondary" and $colorType == "text" {
		@return $secondary-color-text;
	} @else if $colorName == "secondary" and $colorType == "text-light" {
		@return $secondary-color-text-light;
	} @else if $colorName == "tertiary" and $colorType == "normal" {
		@return $tertiary-color-normal;
	} @else if $colorName == "tertiary" and $colorType == "light" {
		@return $tertiary-color-light;
	} @else if $colorName == "tertiary" and $colorType == "transparent" {
		@return $tertiary-color-transparent;
	} @else if $colorName == "tertiary" and $colorType == "text" {
		@return $tertiary-color-text;
	} @else if $colorName == "tertiary" and $colorType == "text-light" {
		@return $tertiary-color-text-light;
	} @else if $colorName == "alert" and $colorType == "normal" {
		@return $alert-color-normal;
	} @else if $colorName == "alert" and $colorType == "light" {
		@return $alert-color-light;
	} @else if $colorName == "alert" and $colorType == "transparent" {
		@return $alert-color-transparent;
	} @else if $colorName == "alert" and $colorType == "text" {
		@return $alert-color-text;
	} @else if $colorName == "alert" and $colorType == "text-light" {
		@return $alert-color-text-light;
	} @else if $colorName == "error" and $colorType == "normal" {
		@return $error-color-normal;
	} @else if $colorName == "error" and $colorType == "light" {
		@return $error-color-light;
	} @else if $colorName == "error" and $colorType == "transparent" {
		@return $error-color-transparent;
	} @else if $colorName == "error" and $colorType == "text" {
		@return $error-color-text;
	} @else if $colorName == "error" and $colorType == "text-light" {
		@return $error-color-text-light;
	} @else if $colorName == "success" and $colorType == "normal" {
		@return $success-color-normal;
	} @else if $colorName == "success" and $colorType == "light" {
		@return $success-color-light;
	} @else if $colorName == "success" and $colorType == "transparent" {
		@return $success-color-transparent;
	} @else if $colorName == "success" and $colorType == "text" {
		@return $success-color-text;
	} @else if $colorName == "success" and $colorType == "text-light" {
		@return $success-color-text-light;
	} @else if $colorName == "neutral" and $colorType == "normal" {
		@return $neutral-color-normal;
	} @else if $colorName == "neutral" and $colorType == "light" {
		@return $neutral-color-light;
	} @else if $colorName == "neutral" and $colorType == "transparent" {
		@return $neutral-color-transparent;
	} @else if $colorName == "neutral" and $colorType == "text" {
		@return $neutral-color-text;
	} @else if $colorName == "neutral" and $colorType == "text-light" {
		@return $neutral-color-text-light;
	} @else if $colorName == "accessory-blue" and $colorType == "normal" {
		@return $accessory-blue-normal;
	} @else if $colorName == "accessory-blue" and $colorType == "light" {
		@return $accessory-blue-light;
	} @else if $colorName == "accessory-blue" and $colorType == "transparent" {
		@return $accessory-blue-transparent;
	} @else if $colorName == "accessory-blue" and $colorType == "text" {
		@return $accessory-blue-text;
	} @else if $colorName == "accessory-blue" and $colorType == "text-light" {
		@return $accessory-blue-text-light;
	} @else if $colorName == "accessory-green" and $colorType == "normal" {
		@return $accessory-green-normal;
	} @else if $colorName == "accessory-green" and $colorType == "light" {
		@return $accessory-green-light;
	} @else if $colorName == "accessory-green" and $colorType == "transparent" {
		@return $accessory-green-transparent;
	} @else if $colorName == "accessory-green" and $colorType == "text" {
		@return $accessory-green-text;
	} @else if $colorName == "accessory-green" and $colorType == "text-light" {
		@return $accessory-green-text-light;
	} @else if $colorName == "accessory-orange" and $colorType == "normal" {
		@return $accessory-orange-normal;
	} @else if $colorName == "accessory-orange" and $colorType == "light" {
		@return $accessory-orange-light;
	} @else if $colorName == "accessory-orange" and $colorType == "transparent" {
		@return $accessory-orange-transparent;
	} @else if $colorName == "accessory-orange" and $colorType == "text" {
		@return $accessory-orange-text;
	} @else if $colorName == "accessory-orange" and $colorType == "text-light" {
		@return $accessory-orange-text-light;
	}
}

@mixin colorMixin($property, $includeSingleValueColors, $optionalSuffix: "") {
	$colTypes: (
		"normal",
		"light",
		"transparent",
		"text",
		"text-light"
	);

	$sizes: (
        "lg": $lgBreakPoint,
        "md": $mdBreakPoint,
        "sm": $smBreakPoint
    );

	$auxCols: (
		"hover": $hover-color,
		"background": $background-color,
		"content-background": $background-content-color,
		"background-content": $background-content-color,
		"white": white,
		"transparent": transparent,
	);
	
	@each $c in $colorOptions {
		@each $ct in $colTypes {
			&--#{$c}-#{$ct} {
				#{$property}: getColorVariable($c, $ct) unquote($optionalSuffix);	
			}
		}
	}

	@if $includeSingleValueColors {
		@each $ac, $av in $auxCols {
			&--#{$ac} {
				#{$property}: $av unquote($optionalSuffix);
			}	
		}		
	}

	@each $sz, $bp in $sizes {
		@each $c in $colorOptions {
			@each $ct in $colTypes {
				&--#{$c}-#{$ct}--#{$sz} {
					@media all and (max-width: $bp) {
						#{$property}: getColorVariable($c, $ct) unquote($optionalSuffix);	
					}
				}
			}
		}
	}	

	@if $includeSingleValueColors {
		@each $sz, $bp in $sizes {
			@each $ac, $av in $auxCols {
				&--#{$ac}--#{$sz} {
					@media all and (max-width: $bp) {
						#{$property}: $av unquote($optionalSuffix);
					}
				}	
			}		
		}		
	}
}

@mixin colorStateMixin($property, $includeSingleValueColors, $optionalSuffix: "", $state: "") {
	$colTypes: (
		"normal",
		"light",
		"text"
	);

	$sizes: (
        "lg": $lgBreakPoint,
        "md": $mdBreakPoint,
        "sm": $smBreakPoint
    );

	$auxCols: (
		"hover": $hover-color, // deprecated (use emphasis instead)
		"background": $background-color,
		"content-background": $background-content-color, // deprecated (user --background-content instead)
		"background-content": $background-content-color,
		"light-mode-normal-text": $light-mode-normal-text-color,
		"light-mode-gray-text": $light-mode-gray-text-color, 
		"white": white,
		"transparent": transparent,
	);

	@each $c in $colorOptions {
		@each $colT in $colTypes {
			&--#{$c}-#{$colT} {
				#{$state} {
					#{$property}: getColorVariable($c, $colT) unquote($optionalSuffix);
				}
			}	
		}		
	}

	@if $includeSingleValueColors {
		@each $ac, $av in $auxCols {
			&--#{$ac} {
				#{$state} {
					#{$property}: $av unquote($optionalSuffix);
				}
			}	
		}		
	}

	@each $sz, $bp in $sizes {
        @each $c in $colorOptions {
			@each $colT in $colTypes {
				&--#{$c}-#{$colT}--#{$sz} {
					@media all and (max-width: $bp) {
						#{$state} {
							#{$property}: getColorVariable($c, $colT) unquote($optionalSuffix);
						}
					}					
				}	
			}		
		}
    }

	@if $includeSingleValueColors {
		@each $sz, $bp in $sizes {
			@each $ac, $av in $auxCols {
				&--#{$ac}--#{$sz} {
					@media all and (max-width: $bp) {
						#{$state} {
							#{$property}: $av unquote($optionalSuffix);
						}
					}					
				}	
			}		
		}		
	}
	
}

.background-color {
	@include colorMixin(background-color, true);
}

.fill-color {
	@include colorMixin(fill, true);
}

.color {
	@include colorMixin(color, false, !important);

	&--gray-text,
	&--gray-normal,
	&--gray-light {
		color: $light-mode-gray-text-color;
	}

	&--default-text,
	&--default-normal,
	&--default-light {
		color: $light-mode-normal-text-color;
	}
}

.hover {
	@include colorStateMixin(background-color, false, !important, "&:hover");
}


.ripple {
	background-position: center;
	transition: background 0.8s;

	&:active {
		background-size: 100%;
		transition: background 0s;
	}

	@include colorStateMixin(background-color, false, !important, "&:active");
}


// #endregion






// #region Border

.border {
	&--px-0 {
		border-width: 0px;
	}

	&--px-1 {
		border-width: 1px;
	}

	&--px-2 {
		border-width: 2px;
	}

	&--solid {
		border-style: solid;
	}

	&--dotted {
		border-style: dotted;
	}

	&--dashed {
		border-style: dashed;
	}

	@include colorMixin(border-color, true, !important);
}

.hover-border {
	@include colorStateMixin(border-color, false, !important, "&:hover");
}

.hover-background {
	@include colorStateMixin(background-color, false, !important, "&:hover");
}




.border-radius {
	&--zero {
		border-radius: 0px;
	}

	&--none {
		border-radius: 0px;
	}

	&--half {
		border-radius: $border-radius-half;
	}

	&--normal {
		border-radius: $border-radius-normal;
	}

	&--full {
		border-radius: $border-radius-full;
	}

	&--round {
		border-radius: $border-radius-round;
	}

	&--circle {
		border-radius: $border-radius-circle;
	}
}

@mixin borderRadiusMixin($prefix, $includeIndividaul, $defaultValue) {
	$prefixFull: '--';
	@if $prefix != "" {
		$prefixFull: '--#{$prefix}-'
	}
	
	&#{$prefixFull}zero {
		border-radius: 0px;
	}

	&#{$prefixFull}none {
		border-radius: 0px;
	}

	&#{$prefixFull}half {
		border-radius: $border-radius-half;
	}

	&#{$prefixFull}normal {
		border-radius: $border-radius-normal;
	}

	&#{$prefixFull}full {
		border-radius: $border-radius-full;		
	}

	&#{$prefixFull}round {
		border-radius: $border-radius-round;		
	}

	&#{$prefixFull}circle {
		border-radius: $border-radius-circle;		
	}

	&#{$prefixFull}default {
		border-radius: $defaultValue;		
	}

	@if $includeIndividaul {
		@each $ind in (top-left, top-right, bottom-left, bottom-right) {
			&#{$prefixFull}#{$ind}-zero {
				border-#{$ind}-radius: 0px;
			}
		
			&#{$prefixFull}#{$ind}-none {
				border-#{$ind}-radius: 0px;
			}
		
			&#{$prefixFull}#{$ind}-half {
				border-#{$ind}-radius: $border-radius-half;
			}
		
			&#{$prefixFull}#{$ind}-normal {
				border-#{$ind}-radius: $border-radius-normal;
			}
		
			&#{$prefixFull}#{$ind}-full {
				border-#{$ind}-radius: $border-radius-full;		
			}

			&#{$prefixFull}#{$ind}-round {
				border-#{$ind}-radius: $border-radius-round;		
			}
			
			&#{$prefixFull}#{$ind}-circle {
				border-#{$ind}-radius: $border-radius-circle;		
			}
			
			&#{$prefixFull}#{$ind}-default {
				border-#{$ind}-radius: $defaultValue;		
			}
		}
	}
}

// #endregion






// #region Fonts and Typography


@mixin typography-title-large {
	font-size: $typography-title-large;
}

@mixin typography-title-medium {
	font-size: $typography-title-medium;
}

@mixin typography-title-small {
	font-size: $typography-title-small;
}

@mixin typography-paragraph-large {
	font-size: $typography-paragraph-large;
}

@mixin typography-paragraph-medium {
	font-size: $typography-paragraph-medium ;
}

@mixin typography-paragraph-small {
	font-size: $typography-paragraph-small;
}

@mixin typography-caption-large {
	font-size: $typography-caption-large;
}

@mixin typography-caption-medium {
	font-size: $typography-caption-medium;
}

@mixin typography-caption-small {
	font-size: $typography-caption-small;
}

@include multiClassSubDesktopVariant(
	$typography-title-large: (font-size: $typography-title-large),
	$typography-title-medium: (font-size: $typography-title-medium),
	$typography-title-small: (font-size: $typography-title-small),
	$typography-paragraph-large: (font-size: $typography-paragraph-large),
	$typography-paragraph-medium: (font-size: $typography-paragraph-medium),
	$typography-paragraph-small: (font-size: $typography-paragraph-small),
	$typography-caption-large: (font-size: $typography-caption-large),
	$typography-caption-medium: (font-size: $typography-caption-medium),
	$typography-caption-small: (font-size: $typography-caption-small),
);



@mixin font-light {
	font-family: $font-family-primary;
	font-weight: $font-weight-light;
}
.font-light {
	@include font-light;
}


@mixin font-normal {
	font-family: $font-family-primary;
	font-weight: $font-weight-normal;
}
.font-normal {
	@include font-normal;
}


@mixin font-header {
	font-family: $font-family-secondary;
	font-weight: $font-weight-bold;
}
.font-header {
	@include font-header;
}

.font-weight {
	@include interClassSubDesktopVariant(
		$light: (font-weight: $font-weight-light),
		$normal: (font-weight: $font-weight-normal),
		$bold: (font-weight: $font-weight-bold),
		$extra-bold: (font-weight: $font-weight-extra-bold),
	)
}

.font-family {
	@include interClassSubDesktopVariant(
		$primary: (font-family: $font-family-primary),
		$secondary: (font-family: $font-family-secondary),		
	)
}

// #endregion






// #region Behavior


@mixin nonselectable {
	-webkit-touch-callout: none;
	-webkit-user-select: none;
	-khtml-user-select: none;
	-moz-user-select: none;
	-ms-user-select: none;
	user-select: none;
}
.nonselectable {
	@include nonselectable;
}


@mixin clickable {
	cursor: pointer;
	
	&:hover {
		background-color: $hover-color;
	}
}
.clickable {
	@include clickable;
}


@mixin transition {
	transition: all ease 0.3s;
}
.transition {
	@include transition;
}


@mixin disabled {
	pointer-events: none;
	opacity: 0.4;
}
.disabled {
	@include disabled;
}


.cursor {
	&--pointer {
		cursor: pointer;
	}

	&--move {
		cursor: move;
	}
}

// #endregion






// #region Layout (Size, margin, padding, position, overflow)

html {
	height: -webkit-fill-available;
}

@mixin hide-scrollbar {
	scrollbar-width: none;

	&::-webkit-scrollbar { /* WebKit */
		width: 0;
		height: 0;
	}
}

.overflow {
	&--y-scroll {
		overflow-y: scroll;
	}
	
	&--scroll-y {
		overflow-y: scroll;
	}
	
	&--x-scroll {
		overflow-x: scroll;
	}
	
	&--scroll-x {
		overflow-x: scroll;
	}

	&--hide-scrollbar {
		@include hide-scrollbar;
	}
}


@mixin widthAndHeightSizes($dim) {
	&--none {
		#{$dim}: 0px;
	}

	&--half {
		#{$dim}: $base-unit-half;
	}

	&--one {
		#{$dim}: $base-unit;
	}

	&--two {
		#{$dim}: $base-unit-two;
	}

	&--px-600 {
		#{$dim}: 600px;
	}

	&--px-500 {
		#{$dim}: 500px;
	}

	&--px-400 {
		#{$dim}: 400px;
	}

	&--px-300 {
		#{$dim}: 300px;
	}

	&--px-200 {
		#{$dim}: 200px;
	}

	&--px-150 {
		#{$dim}: 150px;
	}

	&--px-100 {
		#{$dim}: 100px;
	}

	&--px-50 {
		#{$dim}: 50px;
	}

	&--vh-100 {
		#{$dim}: 100vh;
	}

	&--vh-100-fill {
		#{$dim}: 100vh;
		
		@media (pointer: coarse) {
			#{$dim}: -webkit-fill-available;
			#{$dim}: -moz-available;
		}
	}

	&--vh-90 {
		#{$dim}: 90vh;
	}

	&--vh-80 {
		#{$dim}: 80vh;
	}

	&--vh-70 {
		#{$dim}: 70vh;
	}

	&--vh-60 {
		#{$dim}: 60vh;
	}

	&--vh-50 {
		#{$dim}: 50vh;
	}

	&--vh-40 {
		#{$dim}: 40vh;
	}

	&--vh-30 {
		#{$dim}: 30vh;
	}

	&--vh-20 {
		#{$dim}: 20vh;
	}

	&--vh-10 {
		#{$dim}: 10vh;
	}

	&--vw-100 {
		#{$dim}: 100vw;
	}

	&--vw-90 {
		#{$dim}: 90vw;
	}

	&--vw-80 {
		#{$dim}: 80vw;
	}

	&--vw-70 {
		#{$dim}: 70vw;
	}

	&--vw-60 {
		#{$dim}: 60vw;
	}

	&--vw-50 {
		#{$dim}: 50vw;
	}

	&--vw-40 {
		#{$dim}: 40vw;
	}

	&--vw-30 {
		#{$dim}: 30vw;
	}

	&--vw-20 {
		#{$dim}: 20vw;
	}

	&--vw-10 {
		#{$dim}: 10vw;
	}

	&--pc-100 {
		#{$dim}: 100%;
	}

	&--pc-90 {
		#{$dim}: 90%;
	}

	&--pc-80 {
		#{$dim}: 80%;
	}

	&--pc-70 {
		#{$dim}: 70%;
	}

	&--pc-60 {
		#{$dim}: 60%;
	}

	&--pc-50 {
		#{$dim}: 50%;
	}

	&--pc-40 {
		#{$dim}: 40%;
	}

	&--pc-30 {
		#{$dim}: 30%;
	}

	&--pc-20 {
		#{$dim}: 20%;
	}

	&--pc-10 {
		#{$dim}: 10%;
	}	
}

.min-width {
	@include widthAndHeightSizes("min-width");
}

.max-width {
	@include widthAndHeightSizes("max-width");
}

.width {
	@include widthAndHeightSizes("width");
}

.min-height {
	@include widthAndHeightSizes("min-height")
}

.max-height {
	@include widthAndHeightSizes("max-height")
}

.height {
	@include widthAndHeightSizes("height")
}

@mixin height--100vh-fill {
	height: 100vh;
	
	@media (pointer: coarse) {
		height: -webkit-fill-available;
		height: -moz-available;
	}
}

@mixin max-height--100vh-fill {
	max-height: 100vh;
	
	@media (pointer: coarse) {
		max-height: -webkit-fill-available;
		max-height: -moz-available;
	}
}


.position {
	&--sticky {
		&--top-0 {
			position: sticky;
			top: 0;
		}

		&--bottom-0 {
			position: sticky;
			bottom: 0;
		}

		&--left-0 {
			position: sticky;
			left: 0;
		}
		
		&--right-0 {
			position: sticky;
			right: 0;
		}
	}
}


.z-index {
	&--2 {
		z-index: 2;
	}

	&--3 {
		z-index: 3;
	}

	&--4 {
		z-index: 4;
	}
}


.margin {
	&--none {
		margin: 0;
	}
	
	&--half {
		margin: $base-unit-half;
	}

	&--one {
		margin: $base-unit;
	}

	&--two {
		margin: $base-unit * 2;
	}

	&--5 {
		margin: 5px
	}

	&--10 {
		margin: 10px
	}

	&--20 {
		margin: 20px
	}

	&--30 {
		margin: 30px
	}

	&--40 {
		margin: 40px
	}
}

.margin-vertical {
	&--none {
		margin-top: 0;
		margin-bottom: 0;
	}

	&--half {
		margin-top: $base-unit-half;
		margin-bottom: $base-unit-half;
	}

	&--one {
		margin-top: $base-unit;
		margin-bottom: $base-unit;
	}

	&--two {
		margin-top: $base-unit * 2;
		margin-bottom: $base-unit * 2;
	}

	&--0 {
		margin-top: 0px;
		margin-bottom: 0px;
	}

	&--5 {
		margin-top: 5px;
		margin-bottom: 5px;
	}

	&--10 {
		margin-top: 10px;
		margin-bottom: 10px;
	}

	&--20 {
		margin-top: 20px;
		margin-bottom: 20px;
	}
}

.margin-top {
	&--none {
		margin-top: 0;
	}

	&--half {
		margin-top: $base-unit-half;		
	}

	&--one {
		margin-top: $base-unit;
	}

	&--two {
		margin-top: $base-unit * 2;
	}

	&--0 {
		margin-top: 0px;		
	}

	&--5 {
		margin-top: 5px;		
	}

	&--10 {
		margin-top: 10px;
	}

	&--20 {
		margin-top: 20px;
	}
}

.margin-bottom {
	&--none {
		margin-bottom: 0;
	}

	&--half {
		margin-bottom: $base-unit-half;		
	}

	&--one {
		margin-bottom: $base-unit;
	}

	&--two {
		margin-bottom: $base-unit * 2;
	}

	&--0 {
		margin-bottom: 0px;		
	}

	&--5 {
		margin-bottom: 5px;		
	}

	&--10 {
		margin-bottom: 10px;
	}

	&--20 {
		margin-bottom: 20px;
	}
}

.margin-horizontal {
	&--none {
		margin-left: 0;
		margin-right: 0;
	}

	&--half {
		margin-left: $base-unit-half;
		margin-right: $base-unit-half;
	}

	&--one {
		margin-left: $base-unit;
		margin-right: $base-unit;
	}

	&--two {
		margin-left: $base-unit * 2;
		margin-right: $base-unit * 2;
	}
	
	&--0 {
		margin-left: 0px;
		margin-right: 0px;
	}

	&--5 {
		margin-left: 5px;
		margin-right: 5px;
	}

	&--10 {
		margin-left: 10px;
		margin-right: 10px;
	}

	&--20 {
		margin-left: 20px;
		margin-right: 20px;
	}
}

.margin-left {
	&--none {
		margin-left: 0;
	}

	&--half {
		margin-left: $base-unit-half;
	}

	&--one {
		margin-left: $base-unit;
	}

	&--two {
		margin-left: $base-unit * 2;
	}

	&--0 {
		margin-left: 0px;
	}

	&--5 {
		margin-left: 5px;
	}

	&--10 {
		margin-left: 10px;
	}

	&--20 {
		margin-left: 20px;
	}
}

.margin-right {
	&--none {
		margin-right: 0;
	}

	&--half {
		margin-right: $base-unit-half;
	}

	&--one {
		margin-right: $base-unit;
	}

	&--two {	
		margin-right: $base-unit * 2;
	}

	&--0 {
		margin-right: 0px;
	}

	&--5 {
		margin-right: 5px;
	}

	&--10 {
		margin-right: 10px;
	}

	&--20 {
		margin-right: 20px;
	}
}

.padding {
	&--none {
		padding: 0;
	}
	
	&--half {
		padding: $base-unit-half;
	}

	&--one {
		padding: $base-unit;
	}

	&--two {
		padding: $base-unit * 2;
	}

	&--5 {
		padding: 5px
	}

	&--10 {
		padding: 10px
	}

	&--20 {
		padding: 20px
	}

	&--30 {
		padding: 30px
	}

	&--40 {
		padding: 40px
	}
}

.padding-vertical {
	&--none {
		padding-top: 0;
		padding-bottom: 0;
	}

	&--half {
		padding-top: $base-unit-half;
		padding-bottom: $base-unit-half;
	}

	&--one {
		padding-top: $base-unit;
		padding-bottom: $base-unit;
	}

	&--two {
		padding-top: $base-unit * 2;
		padding-bottom: $base-unit * 2;
	}

	&--5 {
		padding-top: 5px;
		padding-bottom: 5px;
	}
	
	&--10 {
		padding-top: 10px;
		padding-bottom: 10px;
	}

	&--20 {
		padding-top: 20px;
		padding-bottom: 20px;
	}

	&--30 {
		padding-top: 30px;
		padding-bottom: 30px;
	}

	&--40 {
		padding-top: 40px;
		padding-bottom: 40px;
	}
}

.padding-bottom {
	&--none {
		padding-bottom: 0;
	}

	&--half {
		padding-bottom: $base-unit-half;
	}

	&--one {
		padding-bottom: $base-unit;
	}

	&--two {
		padding-bottom: $base-unit * 2;
	}

	&--5 {		
		padding-bottom: 5px;
	}
	
	&--10 {		
		padding-bottom: 10px;
	}

	&--20 {
		padding-bottom: 20px;
	}

	&--30 {
		padding-bottom: 30px;
	}

	&--40 {
		padding-bottom: 40px;
	}
}

.padding-top {
	&--none {
		padding-top: 0;
	}

	&--half {
		padding-top: $base-unit-half;
	}

	&--one {
		padding-top: $base-unit;
	}

	&--two {
		padding-top: $base-unit * 2;
	}

	&--5 {
		padding-top: 5px;		
	}
	
	&--10 {
		padding-top: 10px;
	}

	&--20 {
		padding-top: 20px;
	}

	&--30 {
		padding-top: 30px;
	}

	&--40 {
		padding-top: 40px;
	}
}



.padding-horizontal {
	&--none {
		padding-left: 0;
		padding-right: 0;
	}

	&--half {
		padding-left: $base-unit-half;
		padding-right: $base-unit-half;
	}

	&--one {
		padding-left: $base-unit;
		padding-right: $base-unit;
	}

	&--two {
		padding-left: $base-unit * 2;
		padding-right: $base-unit * 2;
	}

	&--5 {
		padding-left: 5px;
		padding-right: 5px;
	}
	
	&--10 {
		padding-left: 10px;
		padding-right: 10px;
	}

	&--20 {
		padding-left: 20px;
		padding-right: 20px;
	}

	&--30 {
		padding-left: 30px;
		padding-right: 30px;
	}

	&--40 {
		padding-left: 40px;
		padding-right: 40px;
	}
}

.padding-right {
	&--none {
		padding-right: 0;
	}

	&--half {
		padding-right: $base-unit-half;
	}

	&--one {
		padding-right: $base-unit;
	}

	&--two {
		padding-right: $base-unit * 2;
	}

	&--5 {		
		padding-right: 5px;
	}
	
	&--10 {		
		padding-right: 10px;
	}

	&--20 {
		padding-right: 20px;
	}

	&--30 {
		padding-right: 30px;
	}

	&--40 {
		padding-right: 40px;
	}
}

.padding-left {
	&--none {
		padding-left: 0;
	}

	&--half {
		padding-left: $base-unit-half;
	}

	&--one {
		padding-left: $base-unit;
	}

	&--two {
		padding-left: $base-unit * 2;
	}

	&--5 {
		padding-left: 5px;		
	}
	
	&--10 {
		padding-left: 10px;
	}

	&--20 {
		padding-left: 20px;
	}

	&--30 {
		padding-left: 30px;
	}

	&--40 {
		padding-left: 40px;
	}
}

.row-gap {
	@include interClassSubDesktopVariant(		
		$none: (row-gap: 0px),
		$half: (row-gap: $base-unit-half),
		$one: (row-gap: $base-unit),
		$two: (row-gap: $base-unit * 2),
	)
}

.column-gap {
	@include interClassSubDesktopVariant(
		$none: (column-gap: 0px),
		$half: (column-gap: $base-unit-half),
		$one: (column-gap: $base-unit),
		$two: (column-gap: $base-unit * 2),
	)
}

.row-height {
	&--small {
		height: $row-height-small;
	}
	
	&--medium {
		height: $row-height-medium;
	}

	&--large {
		height: $row-height-large;
	}

	&--over {
		height: $row-height-over;
	}
}


@mixin gridSpan($direction) {
	$gso: ("xl", "lg", "md", "sm"); // Grid Size Options
	$gsm: (
		"xl": $xlBreakPoint,
		"lg": $lgBreakPoint,
		"md": $mdBreakPoint,
		"sm": $smBreakPoint
	);
	$gss: (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12); // Grid Size Spans

	@each $s in $gso {
		&--#{$s} {
			@each $sp in $gss {
				&--#{$sp} {
					@if $s == "xl" {
						@if $sp != 0 {
							grid-#{$direction}: span $sp;
							display: block;
						} @else {
							display: none;
						}
					} @else {
						@media screen and (max-width: #{map-get($gsm, $s)}) {
							@if $sp != 0 {
								grid-#{$direction}: span $sp;
								display: block;
							} @else {
								display: none;
							}
						}
					}
				}
			}
		}
	}

}

.grid-column {
	@include gridSpan("column");
}

.grid-row {
	@include gridSpan("row");
}


// #endregion






// #region Text


.text-style {
	&--line-through {
		text-decoration: line-through;
	}
}

.text-align {
	@include interClassSubDesktopVariant(
		$left: (text-align: left),
		$center: (text-align: center),
		$right: (text-align: right),
		$justify: (text-align: justify),
	)
}


@mixin no-text-overflow {
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}
.no-text-overflow {
	@include no-text-overflow;
}


// #endregion






// #region Card styles


.elevation {
	&--0 {
		box-shadow: $elevation-shadow-0;
	}

	&--1 {
		box-shadow: $elevation-shadow-1;
	}

	&--2 {
		box-shadow: $elevation-shadow-2;
	}
}


// #endregion





// #region undecided, deprecated


// deprecated in favor of Card component
@mixin card-light-shadow {
	border-radius: $universal-border-radius;
	box-shadow: $box-shadow;
	background-color: white;
}
.card-light-shadow {
	@include card-light-shadow;
}

// deprecated in favor of Card component
@mixin card-dark-shadow {
	border-radius: $universal-border-radius;
	box-shadow: $box-shadow-dark;
	background-color: white;
}
.card-dark-shadow {
	@include card-dark-shadow;
}

// deprecated in favor of Card component
@mixin card-no-shadow {
	background-color: white;
	border-radius: $universal-border-radius;
	border: 2px solid $border-color;
}
.card-no-shadow {
	@include card-no-shadow;
}

// deprecated in favor of Card component
@mixin card-selectable {
	cursor: pointer;
	@include transition;

	&:hover {
		background-color: $hover-color;
	}
}
.card-selectable {
	@include card-selectable;
}

// deprecated in favor of Card component
@mixin card-selectable-gradient {
	cursor: pointer;
	@include transition;

	&:hover {
		background: $hover-color;
		background-image: $hover-color;
	}
}
.card-selectable-gradient {
	@include card-selectable-gradient;
}

// deprecated in favor of Card component
@mixin card-header {
	@include primary-background;
	text-align: center;
	margin-top: 0;
	padding: 10px 0;
	border-radius: 10px 10px 0 0;
	@include font-header;
}
.card-header {
	@include card-header;
}

// deprecated in favor of Card component
@mixin card-button-footer {
	border-radius: 0 0 10px 10px;
	border-top: 1px solid gray;
	padding: 10px;
	display: flex;
	justify-content: flex-end;
	align-items: center;
}
.card-button-footer {
	@include card-button-footer;
}




// deprecated in favor of Grid component
@mixin grid-two-column {
	display: grid;
	grid-template-columns: 1fr 1fr;
	column-gap: 10px;
}
.grid-two-column {
	@include grid-two-column;
}


// deprecated in favor of Grid component
@mixin grid-three-column {
	display: grid;
	grid-template-columns: 1fr 1fr 1fr;
	column-gap: 10px;
}
.grid-three-column {
	@include grid-three-column;
}


// deprecated in favor of Grid component
.grid {
	display: grid;

	&--one-one {
		grid-template-columns: 1fr 1fr;
	}

	&--one-one-two {
		grid-template-columns: 1fr 1fr 2fr;
	}

	&--two-one-one {
		grid-template-columns: 2fr 1fr 1fr;
	}

	&--one-one-one-one {
		grid-template-columns: 1fr 1fr 1fr 1fr;
	}

	&--one-three {
		grid-template-columns: 1fr 3fr;
	}

	&--three-one {
		grid-template-columns: 3fr 1fr;
	}

	&--column-gap-half {
		column-gap: $base-unit-half;
	}

	&--column-gap-one {
		column-gap: $base-unit;
	}

	&--column-gap-two {
		column-gap: $base-unit * 2;
	}

	&--row-gap-half {
		row-gap: $base-unit-half;
	}

	&--row-gap-one {
		row-gap: $base-unit;
	}

	&--row-gap-two {
		row-gap: $base-unit * 2;
	}
}




@mixin input-error {
	border: 2px solid $error-color-normal !important;
}
.input-error {
	@include input-error;
}

@mixin div-error-border {
	border: 3px solid $error-color-normal !important;
}
.div-error-border {
	@include div-error-border;
}




@mixin flex-start {
	display: flex;
	align-items: center;
}
.flex-start {
	@include flex-start;
}


@mixin flex-center {
	display: flex;
	justify-content: center;
	align-items: center;
}
.flex-center {
	@include flex-center;
}

@mixin flex-row-space-around {
	display: flex;
	justify-content: space-around;
	align-items: center;
}
.flex-row-space-around {
	@include flex-row-space-around;
}

@mixin flex-row-space-between {
	display: flex;
	justify-content: space-between;
	align-items: center;
}
.flex-row-space-between {
	@include flex-row-space-between;
}


@mixin flex-column {
	display: flex;
	flex-flow: column;
	align-items: center;
}
.flex-column {
	@include flex-column;
}


@mixin center-by-transform {
	margin-left: 50%;
	transform: translateX(-50%);
}
.center-by-transform {
	@include center-by-transform;
}

@mixin center-by-flex-row {
	display: flex;
	flex-flow: row;
	justify-content: center;
	align-items: center;
}
.center-by-flex-row {
	@include center-by-flex-row;
}

@mixin center-by-flex-column {
	display: flex;
	flex-flow: column;
	justify-content: center;
	align-items: center;
}
.center-by-flex-column {
	@include center-by-flex-column;
}


.flex {
	display: flex;

	&--direction {
		// e.g. flex--direction--column--sm
		@include interClassSubDesktopVariant(
			$column: (flex-direction: column),
			$column-reverse: (flex-direction: column-reverse), 
			$row: (flex-direction: row),
			$row-reverse: (flex-direction: row-reverse)
		)
	}	

	&--justify-content {
		@include interClassSubDesktopVariant(
			$start: (justify-content: start),
			$end: (justify-content: end),
			$space-around: (justify-content: space-around),
			$space-between: (justify-content: space-between),
			$center: (justify-content: center),
		)
	}

	&--align-items {
		@include interClassSubDesktopVariant(
			$center: (align-items: center),
			$start: (align-items: flex-start),
			$end: (align-items: flex-end),
			$stretch: (align-items: stretch),
		)
	}	

	&--wrap {
		@include interClassSubDesktopVariant(
			$wrap: (flex-wrap: wrap),
			$nowrap: (flex-wrap: nowrap),
			$wrap-reverse: (flex-wrap: wrap-reverse),
			$scroll-y: (overflow-y: scroll),
			$scroll-x: (overflow-x: scroll),
		)
	}

}


// #endregion

@mixin for-touch-device {
	@media (pointer: coarse) {@content;}
}

@mixin for-apple-touch-device {
	@supports (-webkit-touch-callout: none) {@content;}
}